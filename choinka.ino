// Node ID: 635036282
#include "painlessMesh.h"
#include "mash_parameter.h"

Scheduler userScheduler;
painlessMesh  mesh;

const uint8_t    SENSOR_PIN   = A0;
const int        DRY_VALUE    = 1023;                       
const int        WET_VALUE    = 0; 
const int        THRESHOLD   = 23;    // –ø–æ—Ä—ñ–≥ –≤–æ–ª–æ–≥–æ—Å—Ç—ñ

void receivedCallback( uint32_t from, String &msg ) {

  if (msg == "tomat0") feedback();
}

int readsens () {
  int raw = analogRead(SENSOR_PIN);                      // 0‚Ä¶1023
  int pct = map(raw, DRY_VALUE, WET_VALUE, 0, 100);      // –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É % –≤–æ–ª–æ–≥–æ—Å—Ç—ñ
  pct = constrain(pct, 0, 100);

  return pct;
}

void feedback () {
  int pctt = readsens();
  String pct = "tomat0=";
  pct += pctt;
  mesh.sendSingle(624409705,pct);
  mesh.sendSingle(1127818912,pct);
}

Task taskTurnOffRelay(
  0,               
  TASK_ONCE,          // –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ
  []() {
    digitalWrite(4, LOW);   // –≤–∏–º–∏–∫–∞—î–º–æ (HIGH ‚Äî –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ç–æ–≥–æ, –∞–∫—Ç–∏–≤–Ω–µ LOW —É —Ç–µ–±–µ —á–∏ HIGH)
    //Serial.println("gsdssf");
  },
  &userScheduler
);

Task taskReadSensor(
  600000,                    // —á–µ—Ä–µ–∑ 10 –º—ñ–Ω
  TASK_FOREVER,            // –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ
  []() {
    int pct = readsens();
    Serial.println(pct);

    if (pct < THRESHOLD) {
      //Serial.println("üå± –í–æ–ª–æ–≥–æ—Å—Ç—ñ –∑–∞–º–∞–ª–æ ‚Äî –≤–º–∏–∫–∞—é —Ä–µ–ª–µ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—é —Ç–∞–π–º–µ—Ä –Ω–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è");
      digitalWrite(4, HIGH);
      taskTurnOffRelay.restart();
      taskTurnOffRelay.enableDelayed(2000);
    }
  },
  &userScheduler
);

void setup() {
  Serial.begin(115200);
  
  mesh.init( MESH_PREFIX, MESH_PASSWORD, &userScheduler, MESH_PORT );
  mesh.onReceive(&receivedCallback);

  pinMode(4, OUTPUT);
  digitalWrite(4, HIGH);
  delay(5);
  digitalWrite(4, LOW);

  userScheduler.addTask(taskReadSensor);
  userScheduler.addTask(taskTurnOffRelay);
  
  taskReadSensor.enable();
}

void loop() {
  mesh.update();
}
